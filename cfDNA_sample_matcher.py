#!/usr/bin/python3
#John Ambrose
#16/10/17
#Bioinformatician (Operations)
#Genomics England

import pandas as pd
import json
import numpy as np
from pandas.io.json import json_normalize
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("tieringfile", help="file containing list of LP numbers and associated tiering json files")
parser.add_argument("reportfile", help="csv of samples with WGS performed")
parser.add_argument("cfdnafile", help="list of patients from Emma Walsh supplied that have plasma stored in EDTA and/or Streck tubes")
parser.add_argument("genepanelfile", help="list of genes; at least one of these genes must be identified as having a variant in for the patient to be considered for the ctDNA pilot")
parser.add_argument("outputfile", help="output file for results")

args = parser.parse_args()

# get list of json files: which has been collated using bash and awk - n.b. these should be latest delivery/pipeline
#inputcsv = "/home/jambrose/tiering_files_finalTEST"
#reportcsv = "/home/jambrose/reports_log.20092017.csv"
#cfdnacsv = "/home/jambrose/cfdna_samples.csv"
#outfile = "/home/jambrose/json_gene_matching_list.csv"

# get list of genes in gene panel (supplied by Emma Walsh)
with open(args.genepanelfile, 'r') as thermo_list:
    thermo_genes = thermo_list.read().splitlines()
    # print(thermo_genes)

# get all genes contained within that patients json file
def get_genes(df):
    genelist = []
    for d in df['reportedVariantCancer.reportEvents']:
        genelist.append(d[0]['genomicFeatureCancer']['geneName'])

    genes = np.asarray(genelist)
    genes_unique = np.unique(genes)
    return genes_unique

# for each json file in the tiering list generated by the find command, this function flattens it out into a dataframe
def check_sample_for_genes(json_files_df):

    sample_id = json_files_df['sample_id']
    json_filename = json_files_df['jsonpath']
    lab_sample_id = json_files_df['LAB_SAMPLE_ID']
    participant_id = json_files_df['GEL_PARTICIPANT_ID']

    with open(json_filename, 'r') as json_file_to_be_read:
        json_file = json.load(json_file_to_be_read)
        json_df = pd.io.json.json_normalize(json_file)

    json_df_som = json_df.loc[json_df['somaticOrGermline'] == 'somatic']

    if bool(set(thermo_genes).intersection(set(get_genes(json_df_som)))):
    #if any(i in get_genes(json_df_som) for i in get_genes(json_df_som)):
        gene_match = True
        gene_matches = ','.join(sorted(set(thermo_genes).intersection(set(get_genes(json_df_som)))))
    else:
        gene_match = False
        gene_matches = ""

    d = [str(participant_id), str(sample_id), str(lab_sample_id), str(gene_match), str(gene_matches)]

    return d

# get locations of json files
datalocations = pd.read_csv(args.tieringfile)

# get report csv with key to lab ID and plate ID (for json matching)
report = pd.read_csv(args.reportfile)
report = report[["GEL_PARTICIPANT_ID","LAB_SAMPLE_ID","SAMPLE"]]
report = report.drop_duplicates()

merged_json_and_report = pd.merge(datalocations, report, how='inner', left_on='sample_id', right_on='SAMPLE', indicator=False)
json_with_genes_matched = merged_json_and_report.apply(check_sample_for_genes, axis=1)
json_with_genes_matched_df = pd.DataFrame.from_items(zip(json_with_genes_matched.index, json_with_genes_matched.values)).T
json_with_genes_matched_df.columns = ["participant_id", "sample_id", "lab_sample_id", "gene_match", "gene_matches"]
print(json_with_genes_matched_df)
# read list of patients with cfDNA samples supplied on Emma Walsh spreadsheet
cfdnas = pd.read_csv(args.cfdnafile)
cfdnas = cfdnas.applymap(str)

merged_json_and_cfdna = pd.merge(cfdnas, json_with_genes_matched_df, how='left', left_on='Participant_ID', right_on='participant_id', indicator=True)

#merged_report_and_json = pd.merge(report, json_gene_matching_list, how='inner', left_on='SAMPLE', right_on='sample_id', indicator=False)
# print(merged_report_and_json.loc[merged_report_and_json['matching_genes'] == 'False'])
# print(merged_report_and_json)

#header = ["Participant_ID", "Laboratory_Sample_ID", "Cancer_Type", "lab_sample_id", "gene_match", "_merge"]

#merged_json_and_cfdna.to_csv(args.outputfile, index=False, sep='\t', columns=header, na_rep='NA')
merged_json_and_cfdna.to_csv(args.outputfile, index=False, sep='\t', na_rep='NA')
